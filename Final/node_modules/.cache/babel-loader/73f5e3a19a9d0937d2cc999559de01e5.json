{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\BLOCKChain-SoftwareEngg\\\\week11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\BLOCKChain-SoftwareEngg\\\\week11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\BLOCKChain-SoftwareEngg\\\\week11\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3'; // gets installed when we do npm install. all dependcies of project installed automatically\n\nimport logo from '../logo.png';\nimport './App.css';\nimport Ethbay from '../abis/Ethbay'; // abi is folder whihc has ethbay.json, import it.\n// that file has network defined there . Network helps create DOM . so this file helps to create DOM\n// these accounts are in metamask n not ganache and we import in metamask \n\nimport Addressbar from './Addressbar';\nimport Main from './Main';\n\nclass App extends Component {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {\n      account: '',\n      totalNumber: 0,\n      items: [],\n      loading: true\n    };\n\n    this.createItem = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(itemName, itemPrice) {\n        var gasAmount;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true\n              });\n\n              _context.next = 3;\n              return _this.state.deployedEthbay.methods.createItem(itemName, itemPrice).estimateGas({\n                from: _this.state.account\n              });\n\n            case 3:\n              gasAmount = _context.sent;\n\n              _this.state.deployedEthbay.methods.createItem(itemName, itemPrice).send({\n                from: _this.state.account,\n                gas: gasAmount\n              }) // here we use send n give address from where we call \n              .once('receipt', receipt => {\n                _this.setState({\n                  loading: false\n                });\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.buyItem = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(itemId, sellingPrice) {\n        var gasAmount;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this.setState({\n                loading: true\n              });\n\n              _context2.next = 3;\n              return _this.state.deployedEthbay.methods.buyItem(itemId).estimateGas({\n                from: _this.state.account,\n                value: sellingPrice\n              });\n\n            case 3:\n              gasAmount = _context2.sent;\n\n              _this.state.deployedEthbay.methods.buyItem(itemId).send({\n                from: _this.state.account,\n                value: sellingPrice,\n                gas: gasAmount\n              }).once('receipt', receipt => {\n                _this.setState({\n                  loading: false\n                });\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  }\n\n  componentDidMount() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _this2.getWeb3Provider();\n\n          case 2:\n            _context3.next = 4;\n            return _this2.connectToBlockchain();\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))();\n  }\n\n  getWeb3Provider() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!window.ethereum) {\n              _context4.next = 6;\n              break;\n            }\n\n            window.web3 = new Web3(window.ethereum);\n            _context4.next = 4;\n            return window.ethereum.enable();\n\n          case 4:\n            _context4.next = 7;\n            break;\n\n          case 6:\n            if (window.web3) {\n              window.web3 = new Web3(window.web3.currentProvider); //this contacts metamask and from componentDidMount()\n            } else {\n              window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n            }\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }))();\n  }\n\n  connectToBlockchain() {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var web3, accounts, networkId, networkData, deployedEthbay, totalNumber, i, item;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            web3 = window.web3;\n            _context5.next = 3;\n            return web3.eth.getAccounts();\n\n          case 3:\n            accounts = _context5.sent;\n\n            // here we use web 3 fetched from above to get all account info \n            _this3.setState({\n              account: accounts[0]\n            }); // predefined funcion , when we want applicatn to remember smthing \n            // we use set state \n            //when state was initialisedsending data from one .js file to anohtr. we send data from here to address.js . \n            //set state used for \n\n\n            _context5.next = 7;\n            return web3.eth.net.getId();\n\n          case 7:\n            networkId = _context5.sent;\n            // fetch network id 577\n            networkData = Ethbay.networks[networkId]; // ganache network id , or bc network id , 5777\n            // we have 5777 in ethbay written \n\n            if (!networkData) {\n              _context5.next = 30;\n              break;\n            }\n\n            deployedEthbay = new web3.eth.Contract(Ethbay.abi, networkData.address); // \n            // smart contract object and used to transfer data \n\n            _this3.setState({\n              deployedEthbay: deployedEthbay\n            });\n\n            _context5.next = 14;\n            return deployedEthbay.methods.totalNumber().call();\n\n          case 14:\n            totalNumber = _context5.sent;\n            console.log(totalNumber);\n\n            _this3.setState({\n              totalNumber\n            });\n\n            i = 1;\n\n          case 18:\n            if (!(i <= totalNumber)) {\n              _context5.next = 26;\n              break;\n            }\n\n            _context5.next = 21;\n            return deployedEthbay.methods.items(i).call();\n\n          case 21:\n            item = _context5.sent;\n\n            _this3.setState({\n              items: [..._this3.state.items, item] // items added in this array , after each iteration . // to add items \n              // in an array . \n\n            });\n\n          case 23:\n            i++;\n            _context5.next = 18;\n            break;\n\n          case 26:\n            _this3.setState({\n              loading: false\n            });\n\n            console.log(_this3.state.items);\n            _context5.next = 31;\n            break;\n\n          case 30:\n            window.alert('Ethbay contract is not found in your blockchain.');\n\n          case 31:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }))();\n  }\n\n  render() // how to render the layout, the interface of the webpage \n  {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Addressbar, {\n      account: this.state.account,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container-fluid mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.state.loading ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Loading ...\")) : React.createElement(Main, {\n      items: this.state.items // define components in page \n      ,\n      createItem: this.createItem // export functtions to next file in this way \n      ,\n      buyItem: this.buyItem // MAIN is our destination to sendd functions\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/BLOCKChain-SoftwareEngg/week11/src/components/App.js"],"names":["React","Component","Web3","logo","Ethbay","Addressbar","Main","App","state","account","totalNumber","items","loading","createItem","itemName","itemPrice","setState","deployedEthbay","methods","estimateGas","from","gasAmount","send","gas","once","receipt","buyItem","itemId","sellingPrice","value","componentDidMount","getWeb3Provider","connectToBlockchain","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","Contract","abi","address","call","console","log","i","item","render"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CAAyB;;AAEzB,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,gBAAnB,C,CAAoC;AACpC;AACA;;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;;AAAA;AAAA;AAAA,SAC1BO,KAD0B,GAClB;AACNC,MAAAA,OAAO,EAAE,EADH;AAENC,MAAAA,WAAW,EAAE,CAFP;AAGNC,MAAAA,KAAK,EAAE,EAHD;AAINC,MAAAA,OAAO,EAAE;AAJH,KADkB;;AAAA,SAkE1BC,UAlE0B;AAAA,0EAkEb,iBAAOC,QAAP,EAAiBC,SAAjB;AAAA;AAAA;AAAA;AAAA;AACX,cAAA,KAAI,CAACC,QAAL,CAAe;AAACJ,gBAAAA,OAAO,EAAE;AAAV,eAAf;;AADW;AAAA,qBAEa,KAAI,CAACJ,KAAL,CAAWS,cAAX,CAA0BC,OAA1B,CAAkCL,UAAlC,CAA6CC,QAA7C,EAAuDC,SAAvD,EAAkEI,WAAlE,CAA8E;AAACC,gBAAAA,IAAI,EAAE,KAAI,CAACZ,KAAL,CAAWC;AAAlB,eAA9E,CAFb;;AAAA;AAELY,cAAAA,SAFK;;AAGX,cAAA,KAAI,CAACb,KAAL,CAAWS,cAAX,CAA0BC,OAA1B,CAAkCL,UAAlC,CAA6CC,QAA7C,EAAuDC,SAAvD,EAAkEO,IAAlE,CAAuE;AAACF,gBAAAA,IAAI,EAAE,KAAI,CAACZ,KAAL,CAAWC,OAAlB;AAA2Bc,gBAAAA,GAAG,EAAEF;AAAhC,eAAvE,EAAmH;AAAnH,eAECG,IAFD,CAEM,SAFN,EAEkBC,OAAD,IAAY;AAC3B,gBAAA,KAAI,CAACT,QAAL,CAAc;AAACJ,kBAAAA,OAAO,EAAE;AAAV,iBAAd;AACD,eAJD;;AAHW;AAAA;AAAA;AAAA;AAAA;AAAA,OAlEa;;AAAA;AAAA;AAAA;AAAA;;AAAA,SA+E1Bc,OA/E0B;AAAA,2EA+EhB,kBAAOC,MAAP,EAAeC,YAAf;AAAA;AAAA;AAAA;AAAA;AACR,cAAA,KAAI,CAACZ,QAAL,CAAe;AAACJ,gBAAAA,OAAO,EAAE;AAAV,eAAf;;AADQ;AAAA,qBAEgB,KAAI,CAACJ,KAAL,CAAWS,cAAX,CAA0BC,OAA1B,CAAkCQ,OAAlC,CAA0CC,MAA1C,EAAkDR,WAAlD,CAA8D;AAACC,gBAAAA,IAAI,EAAE,KAAI,CAACZ,KAAL,CAAWC,OAAlB;AAA2BoB,gBAAAA,KAAK,EAAED;AAAlC,eAA9D,CAFhB;;AAAA;AAEFP,cAAAA,SAFE;;AAGR,cAAA,KAAI,CAACb,KAAL,CAAWS,cAAX,CAA0BC,OAA1B,CAAkCQ,OAAlC,CAA0CC,MAA1C,EAAkDL,IAAlD,CAAuD;AAACF,gBAAAA,IAAI,EAAE,KAAI,CAACZ,KAAL,CAAWC,OAAlB;AAA2BoB,gBAAAA,KAAK,EAAED,YAAlC;AAAgDL,gBAAAA,GAAG,EAAEF;AAArD,eAAvD,EACCG,IADD,CACM,SADN,EACkBC,OAAD,IAAY;AAC3B,gBAAA,KAAI,CAACT,QAAL,CAAc;AAACJ,kBAAAA,OAAO,EAAE;AAAV,iBAAd;AACD,eAHD;;AAHQ;AAAA;AAAA;AAAA;AAAA;AAAA,OA/EgB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQpBkB,EAAAA,iBAAN,GAAyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGjB,MAAI,CAACC,eAAL,EAHiB;;AAAA;AAAA;AAAA,mBAIjB,MAAI,CAACC,mBAAL,EAJiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKxB;;AAEKD,EAAAA,eAAN,GAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,iBACjBE,MAAM,CAACC,QADU;AAAA;AAAA;AAAA;;AAEnBD,YAAAA,MAAM,CAACE,IAAP,GAAc,IAAIjC,IAAJ,CAAS+B,MAAM,CAACC,QAAhB,CAAd;AAFmB;AAAA,mBAGbD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAHa;;AAAA;AAAA;AAAA;;AAAA;AAKhB,gBAAIH,MAAM,CAACE,IAAX,EAAiB;AACpBF,cAAAA,MAAM,CAACE,IAAP,GAAc,IAAIjC,IAAJ,CAAS+B,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd,CADoB,CACiC;AAEtD,aAHI,MAIA;AACDJ,cAAAA,MAAM,CAACK,KAAP,CAAa,qEAAb;AACH;;AAXoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAYtB;;AAEKN,EAAAA,mBAAN,GAA2B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBG,YAAAA,IADmB,GACZF,MAAM,CAACE,IADK;AAAA;AAAA,mBAEFA,IAAI,CAACI,GAAL,CAASC,WAAT,EAFE;;AAAA;AAEnBC,YAAAA,QAFmB;;AAEqB;AAC9C,YAAA,MAAI,CAACzB,QAAL,CAAc;AAACP,cAAAA,OAAO,EAAEgC,QAAQ,CAAC,CAAD;AAAlB,aAAd,EAHyB,CAGa;AACtC;AACA;AAGA;;;AARyB;AAAA,mBASDN,IAAI,CAACI,GAAL,CAASG,GAAT,CAAaC,KAAb,EATC;;AAAA;AASnBC,YAAAA,SATmB;AASoB;AACvCC,YAAAA,WAVmB,GAULzC,MAAM,CAAC0C,QAAP,CAAgBF,SAAhB,CAVK,EAUuB;AAChD;;AAXyB,iBAYtBC,WAZsB;AAAA;AAAA;AAAA;;AAajB5B,YAAAA,cAbiB,GAaA,IAAIkB,IAAI,CAACI,GAAL,CAASQ,QAAb,CAAsB3C,MAAM,CAAC4C,GAA7B,EAAkCH,WAAW,CAACI,OAA9C,CAbA,EAawD;AAC/E;;AAEA,YAAA,MAAI,CAACjC,QAAL,CAAc;AAACC,cAAAA,cAAc,EAAEA;AAAjB,aAAd;;AAhBuB;AAAA,mBAiBGA,cAAc,CAACC,OAAf,CAAuBR,WAAvB,GAAqCwC,IAArC,EAjBH;;AAAA;AAiBjBxC,YAAAA,WAjBiB;AAkBvByC,YAAAA,OAAO,CAACC,GAAR,CAAY1C,WAAZ;;AACA,YAAA,MAAI,CAACM,QAAL,CAAc;AAACN,cAAAA;AAAD,aAAd;;AACS2C,YAAAA,CApBc,GAoBV,CApBU;;AAAA;AAAA,kBAoBRA,CAAC,IAAG3C,WApBI;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAqBFO,cAAc,CAACC,OAAf,CAAuBP,KAAvB,CAA6B0C,CAA7B,EAAgCH,IAAhC,EArBE;;AAAA;AAqBfI,YAAAA,IArBe;;AAsBrB,YAAA,MAAI,CAACtC,QAAL,CAAc;AACZL,cAAAA,KAAK,EAAC,CAAC,GAAG,MAAI,CAACH,KAAL,CAAWG,KAAf,EAAsB2C,IAAtB,CADM,CACsB;AAClC;;AAFY,aAAd;;AAtBqB;AAoBQD,YAAAA,CAAC,EApBT;AAAA;AAAA;;AAAA;AA4BvB,YAAA,MAAI,CAACrC,QAAL,CAAc;AAACJ,cAAAA,OAAO,EAAE;AAAV,aAAd;;AACAuC,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAI,CAAC5C,KAAL,CAAWG,KAAvB;AA7BuB;AAAA;;AAAA;AA+BvBsB,YAAAA,MAAM,CAACK,KAAP,CAAa,kDAAb;;AA/BuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAkC1B;;AAyBDiB,EAAAA,MAAM,GAAG;AACT;AACE,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE,KAAK/C,KAAL,CAAWC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAKD,KAAL,CAAWI,OAAX,GAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAL,CAFF,GAIE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAI,KAAKJ,KAAL,CAAWG,KAA1B,CAAkC;AAAlC;AACM,MAAA,UAAU,EAAI,KAAKE,UADzB,CACoC;AADpC;AAEM,MAAA,OAAO,EAAI,KAAKa,OAFtB,CAE8B;AAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALN,CADF,CADF,CAFF,CADF;AAmBD;;AA7GyB;;AAgH5B,eAAenB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3'; // gets installed when we do npm install. all dependcies of project installed automatically\n\nimport logo from '../logo.png';\nimport './App.css';\nimport Ethbay from '../abis/Ethbay' // abi is folder whihc has ethbay.json, import it.\n// that file has network defined there . Network helps create DOM . so this file helps to create DOM\n// these accounts are in metamask n not ganache and we import in metamask \nimport Addressbar from './Addressbar'\nimport Main from './Main'\n\nclass App extends Component {\n  state = {\n    account: '',\n    totalNumber: 0,\n    items: [],\n    loading: true \n  }\n\n  async componentDidMount(){ // always have function called this is APP.js \n    // metamask is wallet or interface for transactions to occur . \n    //\n    await this.getWeb3Provider();\n    await this.connectToBlockchain();\n  }\n  \n  async getWeb3Provider(){\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider); //this contacts metamask and from componentDidMount()\n\n    }\n    else {\n        window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async connectToBlockchain(){\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();// here we use web 3 fetched from above to get all account info \n    this.setState({account: accounts[0]}) // predefined funcion , when we want applicatn to remember smthing \n    // we use set state \n    //when state was initialisedsending data from one .js file to anohtr. we send data from here to address.js . \n\n\n    //set state used for \n    const networkId = await web3.eth.net.getId() // fetch network id 577\n    const networkData = Ethbay.networks[networkId]; // ganache network id , or bc network id , 5777\n    // we have 5777 in ethbay written \n    if(networkData) {\n      const deployedEthbay = new web3.eth.Contract(Ethbay.abi, networkData.address); // \n      // smart contract object and used to transfer data \n\n      this.setState({deployedEthbay: deployedEthbay}); \n      const totalNumber = await deployedEthbay.methods.totalNumber().call();\n      console.log(totalNumber);\n      this.setState({totalNumber})\n      for (var i = 1;i<= totalNumber;i++) {\n        const item = await deployedEthbay.methods.items(i).call();\n        this.setState({\n          items:[...this.state.items, item] // items added in this array , after each iteration . // to add items \n          // in an array . \n\n        });\n      }\n      this.setState({loading: false})\n      console.log(this.state.items)\n    } else {\n      window.alert('Ethbay contract is not found in your blockchain.')\n    }\n  \n  }\n\n \n  createItem = async (itemName, itemPrice) => {\n    this.setState ({loading: true})\n    const gasAmount = await this.state.deployedEthbay.methods.createItem(itemName, itemPrice).estimateGas({from: this.state.account})\n    this.state.deployedEthbay.methods.createItem(itemName, itemPrice).send({from: this.state.account, gas: gasAmount}) // here we use send n give address from where we call \n\n    .once('receipt', (receipt)=> {\n      this.setState({loading: false});\n    })\n  }\n\n\n  //gas limit for loops we define\n\n  buyItem = async (itemId, sellingPrice) => {\n    this.setState ({loading: true})\n    const gasAmount = await this.state.deployedEthbay.methods.buyItem(itemId).estimateGas({from: this.state.account, value: sellingPrice})\n    this.state.deployedEthbay.methods.buyItem(itemId).send({from: this.state.account, value: sellingPrice, gas: gasAmount })\n    .once('receipt', (receipt)=> {\n      this.setState({loading: false});\n    })\n  }\n  \n  render() // how to render the layout, the interface of the webpage \n  {\n    return (\n      <div>\n        <Addressbar account={this.state.account}/>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main>\n              { this.state.loading \n                ? \n                  <div><p className=\"text-center\">Loading ...</p></div> \n                : \n                  <Main items = {this.state.items}  // define components in page \n                        createItem = {this.createItem}// export functtions to next file in this way \n                        buyItem = {this.buyItem}// MAIN is our destination to sendd functions\n                  />}\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}